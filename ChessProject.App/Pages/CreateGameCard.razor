@using System.Text
@using ChessProject.Application.Lobby
@using ChessProject.Domain.Models
@using ChessProject.Infrastracture.Dal
@implements IDisposable;

<MudCard Class="m-1 cursor-pointer" Elevation="@Elevation" Style="@Styles"
          @onclick="CardClicker" @onmouseover="() => MouseOn(20)" @onmouseout=" () => MouseOn(1)">
    <MudCardContent>
        <MudText Typo="Typo.h5" Align="Align.Center">@TimeControl.ToString() + @Increment.ToString()</MudText>
        <MudText Typo="Typo.h6" Align="Align.Center">@Variant</MudText>
    </MudCardContent>
</MudCard>

@code {
    [Inject] protected AuthenticationStateProvider AuthState { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private LobbyService Lobby { get; set; }
    [Inject] private ChessProjectDbContext _ctx { get; set; }
    
    [Parameter] public int TimeControl { get; set; }
    [Parameter] public int Increment { get; set; }
    [Parameter] public string? Variant { get; set; }
    [Parameter] public string? Width { get; set; }
    [Parameter] public ChessPlayer Player { get; set; }

    private string? Styles { get; set; }
    private int Elevation { get; set; } = 1;
    protected override void OnInitialized()
    {
        var sb = new StringBuilder();
        sb.Append("background: dimgrey; ");
        sb.Append($"width: {Width}");
        Styles = sb.ToString();
    }

    private void CardClicker()
    {
        var preference = new PairingPreference()
        {
            TimeControle = TimeControl,
            Increment = Increment,
            SidePreference = SidePreference.Random
        };
        var auth = AuthState;
        var authTask = auth.GetAuthenticationStateAsync().Result;
        if (authTask.User.Identity != null && !authTask.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/Identity/Account/Login", true);
        }
        string? personName = authTask?.User?.Identity?.Name;
        string? identityId = _ctx.Users.Where(u => u.UserName == personName).Select(x => x.Id).FirstOrDefault();
        Player = _ctx.Players.FirstOrDefault(p => p.IdentityId == identityId);
        Lobby.AddPlayerToLobby(Player, preference);
        
        //Lobby.OnGameCreated += RedirectToGame;
        ChessGame game = Lobby.Ð¡heckGame(Player);
        RedirectToGame(game);
    }

    private void MouseOn(int newValue)
    {
        var sb = new StringBuilder();
        Elevation = newValue;
        if (newValue > 1)
        {
            sb.Append("background: LightCyan; ");
            sb.Append($"width: {Width}");
            Styles = sb.ToString();
        }
        else
        {
            sb.Append("background: dimgrey;");
            sb.Append($"width: {Width}");
            Styles = sb.ToString();
        }
    }

    public void Dispose()
    {
        //Lobby.RemovePlayerFromLobby(Player);
    }

    private void RedirectToGame(ChessGame newGame)
    {
        Lobby.RemovePlayerFromLobby(Player);
        var parameters = new Dictionary<string, object>
        {
            {"_chessgame", newGame}
        };
        NavigationManager.NavigateTo($"/game/{newGame.UniqId.ToString()}");
    }
}
